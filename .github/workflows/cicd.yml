name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '1.8'
          distribution: 'adopt'
          javaHome: 'C:\Program Files\Java\jdk1.8.0_202\bin' # Update with your JDK 1.8 installation path

      - name: Create lib directory and download JUnit JAR file
        run: |
          mkdir lib
          Invoke-WebRequest -Uri 'https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar' -OutFile 'lib/junit-4.13.2.jar'

      - name: Push to GitHub
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git add .
          git commit -m "Automated build and test"
          git push origin master # Update to use 'master' as the branch name

  test:
    name: Test
    runs-on: windows-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '1.8'
          distribution: 'adopt'
          javaHome: 'C:\Program Files\Java\jdk1.8.0_202\bin' 

      - name: Install JUnit
        run: |
          mkdir lib
          curl -0 https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.8.2/junit-platform-console-standalone-1.8.2.jar
          mv junit-platform-console-standalone-1.8.2.jar lib/

      - name: Run automated tests
        run: |
          java -jar lib/junit-platform-console-standalone-1.8.2.jar --class-path target --scan-class-path

  deployment:
    name: Deployment
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

   #    - name: Deploy to production
       #  run: |
          # Commands to deploy your application to a production environment
          # Example: Use tools like Docker, Ansible, or simply copy files to a server
